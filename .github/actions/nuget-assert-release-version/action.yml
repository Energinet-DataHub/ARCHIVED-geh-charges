# Copyright 2020 Energinet DataHub A/S
#
# Licensed under the Apache License, Version 2.0 (the "License2");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

name: Assert NuGet packages release version
description: 'Ensure packages does not use a version number (not looking at prereleases) that already exists on NuGet.org'

inputs:
  NUPKG_RECURSE_PATH:
    description: 'Path to search recursively for *.nupkg files'
    required: true

runs:
  using: composite
  steps:
    - name: Check each NuGet package version does not exists (not looking at prereleases)
      shell: pwsh
      run: |
        $path = "${{ inputs.NUPKG_RECURSE_PATH }}"

        # Loop on NuGet package files in path
        $hasError = $false
        foreach($nupkgs in Get-ChildItem -Path $path -Recurse -Filter "*.nupkg")
        {
            # Output package name
            Write-Host "Investigating package: $nupkgs"

            # Unzip package
            $zipFileName = "$($nupkgs.Directory.FullName)\$($nupkgs.BaseName).zip"
            Copy-Item $nupkgs.FullName $zipFileName
            $nugetFolder = "$($nupkgs.Directory.FullName)\$($nupkgs.BaseName)"
            Expand-Archive $zipFileName $nugetFolder

            # Get NuSpec Xml
            $nuspecPath = (Get-ChildItem -Path $nugetFolder -Filter "*.nuspec")[0]
            [xml]$nuspec = Get-Content $nuspecPath.FullName

            # Get package version from NuSpec (without prerelease part)
            $packageId = $nuspec.package.metadata.id
            $packageVersion = [regex]::new("^(([0-9]+)\.([0-9]+)\.([0-9]+))(?:-([0-9A-Za-z-]+(?:\.[0-9A-Za-z-]+)*))?(?:\+[0-9A-Za-z-]+)?$").Match($nuspec.package.metadata.version).Groups[1].Value

            $method = "GET"
            $url = "https://api.nuget.org/v3-flatcontainer/$packageId/$packageVersion/$packageId.nuspec"

            try
            {
                Write-Host "Check that '$packageId' version '$packageVersion' does not exist."

                $response = Invoke-RestMethod -Uri $url -Method $method

                Write-Host "::error::'$packageId' version '$packageVersion' exists. You need to create a newer version."
                $hasError = $true
            }
            catch
            {
                if($_.Exception.Response.StatusCode.value__ -eq 401)
                {
                  Write-Host "::error::Not authorized to access this resource."
                  $hasError = $true
                }
                elseif($_.Exception.Response.StatusCode.value__ -ne 404)
                {
                  CreateError "::error::Unknown error."
                  $hasError = $true
                }

                # If we get 404, the version does not exist.
                Write-Host "'$packageId' version '$packageVersion' does not exist."
            }
        }

        if ($hasError)
        {
          exit 1
        }
