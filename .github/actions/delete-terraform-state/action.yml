# Copyright 2020 Energinet DataHub A/S
#
# Licensed under the Apache License, Version 2.0 (the "License2");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

name: Delete Terraform State
description: Deletes the storage account holding the teffaform state
inputs:
  SECRETS_TENANT_ID:
    required: true
  SECRETS_SPN_ID:
    required: true
  SECRETS_SPN_SECRET:
    required: true
  SECRETS_SUBSCRIPTION_ID:
    required: true
  PROJECT_NAME:
    required: true
  ENVIRONMENT_SHORT:
    required: true
  ENVIRONMENT_LONG:
    required: true

runs:
  using: composite
  steps:
    - name: Set Environment Secrets
      shell: bash
      run: |  
        echo "TERRAFORM_STORAGE_NAME=tfstate${{ inputs.PROJECT_NAME }}${{ inputs.ENVIRONMENT_SHORT }}" >> $GITHUB_ENV

    - name: Azure CLI Install
      shell: bash
      run: curl -sL https://aka.ms/InstallAzureCLIDeb | sudo bash

    - name: Azure CLI Login
      shell: bash
      run: |
        az login --service-principal --username "${{ inputs.SECRETS_SPN_ID }}" --password "${{ inputs.SECRETS_SPN_SECRET }}" --tenant "${{ inputs.SECRETS_TENANT_ID }}"
        az account set --subscription "${{ inputs.SECRETS_SUBSCRIPTION_ID }}"
   
    - name: Find and delete Terraform storage if found
      shell: bash
      run: |
        storage_exists=$(az storage account check-name --name '${{ env.TERRAFORM_STORAGE_NAME }}' | python3 -c "import sys, json; print(not json.load(sys.stdin)['nameAvailable'])")
        if [ "$storage_exists" = False ]; then
          echo "Storage does not exists, nothing to delete";
          exit;
        fi
        az storage account delete --resource-group ${{ inputs.ENVIRONMENT_LONG }} --name ${{ env.TERRAFORM_STORAGE_NAME }} --yes