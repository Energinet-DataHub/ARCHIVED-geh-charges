# Copyright 2020 Energinet DataHub A/S
#
# Licensed under the Apache License, Version 2.0 (the "License2");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

name: Deploy Terraform infrastructure
description: Deploy Terraform infrastructure
inputs:
  SECRETS_TENANT_ID:
    required: true
  SECRETS_SPN_ID:
    required: true
  SECRETS_SPN_OBJECT_ID:
    required: true
  SECRETS_SPN_SECRET:
    required: true
  SECRETS_SUBSCRIPTION_ID:
    required: true
  SECRETS_SHARED_RESOURCES_KEYVAULT_NAME:
    required: true
  SECRETS_SHARED_RESOURCES_RESOURCE_GROUP_NAME:
    required: true
  SECRETS_SHARED_RESOURCES_SQL_SERVER_NAME:
    required: true
  SECRETS_PAT_TOKEN:
    required: true
  PROJECT_NAME:
    required: true
  ORGANISATION_NAME:
    required: true
  ENVIRONMENT_SHORT:
    required: true
  ENVIRONMENT_LONG:
    required: true
  ENVIRONMENT_NAME:
    required: true
  TERRAFORM_BACKEND_FILE_PATH:
    required: true

runs:
  using: composite
  steps:
    - name: Set Environment Secrets
      shell: bash
      run: |  
        echo "TERRAFORM_STORAGE_NAME=tfstate${{ inputs.PROJECT_NAME }}${{ inputs.ENVIRONMENT_SHORT }}" >> $GITHUB_ENV
        echo "ARM_TENANT_ID=${{ inputs.SECRETS_TENANT_ID }}" >> $GITHUB_ENV
        echo "ARM_CLIENT_ID=${{ inputs.SECRETS_SPN_ID }}" >> $GITHUB_ENV
        echo "ARM_CLIENT_OBJECT_ID=${{ inputs.SECRETS_SPN_OBJECT_ID }}" >> $GITHUB_ENV
        echo "ARM_CLIENT_SECRET=${{ inputs.SECRETS_SPN_SECRET }}" >> $GITHUB_ENV
        echo "ARM_SUBSCRIPTION_ID=${{ inputs.SECRETS_SUBSCRIPTION_ID }}" >> $GITHUB_ENV

    - name: Azure CLI Install
      shell: bash
      run: curl -sL https://aka.ms/InstallAzureCLIDeb | sudo bash

    - name: Azure CLI Login
      shell: bash
      run: |
        az login --service-principal --username "${{ inputs.SECRETS_SPN_ID }}" --password "${{ inputs.SECRETS_SPN_SECRET }}" --tenant "${{ inputs.SECRETS_TENANT_ID }}"
        az account set --subscription "${{ inputs.SECRETS_SUBSCRIPTION_ID }}"

    - name: Setup Authorization to pull TF modules
      shell: bash
      run: |
        git config --local --remove-section http."https://github.com/"
        git config --global url."https://foo:${{ inputs.SECRETS_PAT_TOKEN }}@github.com/Energinet-DataHub/geh-terraform-modules".insteadOf "https://github.com/Energinet-DataHub/geh-terraform-modules"
    
    - name: Find or create Terraform storage
      shell: bash
      id: state-storage-exists
      run: |
        storage_exists=$(az storage account check-name --name 'tfstate${{ inputs.PROJECT_NAME }}${{ inputs.ENVIRONMENT_SHORT }}' | python3 -c "import sys, json; print(not json.load(sys.stdin)['nameAvailable'])")
        if [ "$storage_exists" = True ]; then
          echo "Storage exists";
          exit;
        fi
        az storage account create --resource-group ${{ inputs.ENVIRONMENT_LONG }} --name ${{ env.TERRAFORM_STORAGE_NAME }} --sku Standard_LRS --encryption-services blob
        account_key=$(az storage account keys list --resource-group ${{ inputs.ENVIRONMENT_LONG }} --account-name ${{ env.TERRAFORM_STORAGE_NAME }} --query '[0].value' -o tsv)
        az storage container create --name tfstate --account-name ${{ env.TERRAFORM_STORAGE_NAME }} --account-key $account_key

    # Try not to reference TF_VAR variables in pipeline yml files, only values should be set and they should be read in terraform only
    # rather create duplicate ENV pipeline vatiable if needed to separate concerns
    - name: Set TF Vars
      shell: bash
      run: |
        echo "TF_VAR_tenant_id=${{ inputs.SECRETS_TENANT_ID }}" >> $GITHUB_ENV
        echo "TF_VAR_spn_object_id=${{ inputs.SECRETS_SPN_OBJECT_ID }}" >> $GITHUB_ENV
        echo "TF_VAR_environment=${{ inputs.ENVIRONMENT_SHORT }}" >> $GITHUB_ENV
        echo "TF_VAR_organisation=${{ inputs.ORGANISATION_NAME }}" >> $GITHUB_ENV
        echo "TF_VAR_project=${{ inputs.PROJECT_NAME }}" >> $GITHUB_ENV
        echo "TF_VAR_resource_group_name=${{ inputs.ENVIRONMENT_LONG }}" >> $GITHUB_ENV
        echo "TF_VAR_sharedresources_keyvault_name=${{ inputs.SECRETS_SHARED_RESOURCES_KEYVAULT_NAME }}" >> $GITHUB_ENV
        echo "TF_VAR_sharedresources_resource_group_name=${{ inputs.SECRETS_SHARED_RESOURCES_RESOURCE_GROUP_NAME }}" >> $GITHUB_ENV
        echo "TF_VAR_sharedresources_sql_server_name=${{ inputs.SECRETS_SHARED_RESOURCES_SQL_SERVER_NAME }}" >> $GITHUB_ENV

    - name: Configure Terraform Backend
      shell: bash
      run: |
        sed -i 's/@resource_group_name/${{ inputs.ENVIRONMENT_LONG }}/' ${{ inputs.TERRAFORM_BACKEND_FILE_PATH }}
        sed -i 's/@storage_account_name/${{ env.TERRAFORM_STORAGE_NAME }}/' ${{ inputs.TERRAFORM_BACKEND_FILE_PATH }}

    # Override/overwrite with environment specific infrastructure
    - name: Configure environment specific infrastructure
      shell: bash
      working-directory: ./build/infrastructure
      run: |
        cp -fR ./env/${{ inputs.ENVIRONMENT_NAME }}/* ./main

    - name: Terraform Init
      shell: bash
      working-directory: ./build/infrastructure/main
      run: terraform init

    - name: Terraform Plan
      shell: bash
      working-directory: ./build/infrastructure/main
      run: terraform plan

    - name: Terraform Apply
      shell: bash
      id: terraform-apply
      working-directory: ./build/infrastructure/main
      run: | 
        terraform apply -no-color -auto-approve
        echo "::set-output name=sql-server-connectionstring::$(terraform output metering_point_connection_string)"
