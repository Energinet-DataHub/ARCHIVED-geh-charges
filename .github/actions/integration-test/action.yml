# Copyright 2020 Energinet DataHub A/S
#
# Licensed under the Apache License, Version 2.0 (the "License2");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# NOTE:
# This should be able to handle setup, linting, building, testing, and
# reporting, but today actions cannot call other actions. This is being worked
# on, and once the issue below is resolved, this file should be updated to
# include those steps.
#
# https://github.com/actions/runner/pull/612
# https://github.com/actions/runner/issues/646

name: 'Integration Tests'
description: 'Execute integration tests.'

inputs:
  test_dll:
    description: 'Path to the csproj file.'
    required: true
  key_vault_name:
    description: 'Name of the domain key vault.'
    required: true

runs:
  using: composite
  steps:
    - name: Obtain keyvault information
      shell: bash
      run: |
        keyvault_secret_details=$(az keyvault secret show --name "MESSAGE-RECEIVER-HOSTNAME" --vault-name ${{ inputs.key_vault_name }})
        charges_MESSAGE_RECEIVER_HOSTNAME=$(echo $keyvault_secret_details | python -c "import sys, json; print(json.load(sys.stdin)['value'])")
        echo ::add-mask::$charges_MESSAGE_RECEIVER_HOSTNAME
        echo "MESSAGE_RECEIVER_HOSTNAME=$charges_MESSAGE_RECEIVER_HOSTNAME" >> $GITHUB_ENV

        keyvault_secret_details=$(az keyvault secret show --name "COMMAND-RECEIVED-SENDER-CONNECTION-STRING" --vault-name ${{ inputs.key_vault_name }})
        charges_COMMAND_RECEIVED_SENDER_CONNECTION_STRING=$(echo $keyvault_secret_details | python -c "import sys, json; print(json.load(sys.stdin)['value'])")
        echo ::add-mask::$charges_COMMAND_RECEIVED_SENDER_CONNECTION_STRING
        echo "COMMAND_RECEIVED_SENDER_CONNECTION_STRING=$charges_COMMAND_RECEIVED_SENDER_CONNECTION_STRING" >> $GITHUB_ENV

        keyvault_secret_details=$(az keyvault secret show --name "COMMAND-RECEIVED-LISTENER-CONNECTION-STRING" --vault-name ${{ inputs.key_vault_name }})
        charges_COMMAND_RECEIVED_LISTENER_CONNECTION_STRING=$(echo $keyvault_secret_details | python -c "import sys, json; print(json.load(sys.stdin)['value'])")
        echo ::add-mask::$charges_COMMAND_RECEIVED_LISTENER_CONNECTION_STRING
        echo "COMMAND_RECEIVED_LISTENER_CONNECTION_STRING=$charges_COMMAND_RECEIVED_LISTENER_CONNECTION_STRING" >> $GITHUB_ENV

        keyvault_secret_details=$(az keyvault secret show --name "COMMAND-ACCEPTED-SENDER-CONNECTION-STRING" --vault-name ${{ inputs.key_vault_name }})
        charges_COMMAND_ACCEPTED_SENDER_CONNECTION_STRING=$(echo $keyvault_secret_details | python -c "import sys, json; print(json.load(sys.stdin)['value'])")
        echo ::add-mask::$charges_COMMAND_ACCEPTED_SENDER_CONNECTION_STRING
        echo "COMMAND_ACCEPTED_SENDER_CONNECTION_STRING=$charges_COMMAND_ACCEPTED_SENDER_CONNECTION_STRING" >> $GITHUB_ENV

        keyvault_secret_details=$(az keyvault secret show --name "COMMAND-ACCEPTED-LISTENER-CONNECTION-STRING" --vault-name ${{ inputs.key_vault_name }})
        charges_COMMAND_ACCEPTED_LISTENER_CONNECTION_STRING=$(echo $keyvault_secret_details | python -c "import sys, json; print(json.load(sys.stdin)['value'])")
        echo ::add-mask::$charges_COMMAND_ACCEPTED_LISTENER_CONNECTION_STRING
        echo "COMMAND_ACCEPTED_LISTENER_CONNECTION_STRING=$charges_COMMAND_ACCEPTED_LISTENER_CONNECTION_STRING" >> $GITHUB_ENV

        keyvault_secret_details=$(az keyvault secret show --name "COMMAND-REJECTED-SENDER-CONNECTION-STRING" --vault-name ${{ inputs.key_vault_name }})
        charges_COMMAND_REJECTED_SENDER_CONNECTION_STRING=$(echo $keyvault_secret_details | python -c "import sys, json; print(json.load(sys.stdin)['value'])")
        echo ::add-mask::$charges_COMMAND_REJECTED_SENDER_CONNECTION_STRING
        echo "COMMAND_REJECTED_SENDER_CONNECTION_STRING=$charges_COMMAND_REJECTED_SENDER_CONNECTION_STRING" >> $GITHUB_ENV

        keyvault_secret_details=$(az keyvault secret show --name "COMMAND-REJECTED-LISTENER-CONNECTION-STRING" --vault-name ${{ inputs.key_vault_name }})
        charges_COMMAND_REJECTED_LISTENER_CONNECTION_STRING=$(echo $keyvault_secret_details | python -c "import sys, json; print(json.load(sys.stdin)['value'])")
        echo ::add-mask::$charges_COMMAND_REJECTED_LISTENER_CONNECTION_STRING
        echo "COMMAND_REJECTED_LISTENER_CONNECTION_STRING=$charges_COMMAND_REJECTED_LISTENER_CONNECTION_STRING" >> $GITHUB_ENV

        keyvault_secret_details=$(az keyvault secret show --name "COMMAND-RECEIVED-TOPIC-NAME" --vault-name ${{ inputs.key_vault_name }})
        charges_COMMAND_RECEIVED_TOPIC_NAME=$(echo $keyvault_secret_details | python -c "import sys, json; print(json.load(sys.stdin)['value'])")
        echo "COMMAND_RECEIVED_TOPIC_NAME=$charges_COMMAND_RECEIVED_TOPIC_NAME" >> $GITHUB_ENV

        keyvault_secret_details=$(az keyvault secret show --name "COMMAND-ACCEPTED-TOPIC-NAME" --vault-name ${{ inputs.key_vault_name }})
        charges_COMMAND_ACCEPTED_TOPIC_NAME=$(echo $keyvault_secret_details | python -c "import sys, json; print(json.load(sys.stdin)['value'])")
        echo "COMMAND_ACCEPTED_TOPIC_NAME=$charges_COMMAND_ACCEPTED_TOPIC_NAME" >> $GITHUB_ENV

        keyvault_secret_details=$(az keyvault secret show --name "COMMAND-REJECTED-TOPIC-NAME" --vault-name ${{ inputs.key_vault_name }})
        charges_COMMAND_REJECTED_TOPIC_NAME=$(echo $keyvault_secret_details | python -c "import sys, json; print(json.load(sys.stdin)['value'])")
        echo "COMMAND_REJECTED_TOPIC_NAME=$charges_COMMAND_REJECTED_TOPIC_NAME" >> $GITHUB_ENV

        keyvault_secret_details=$(az keyvault secret show --name "COMMAND-RECEIVED-SUBSCRIPTION-NAME" --vault-name ${{ inputs.key_vault_name }})
        charges_COMMAND_RECEIVED_SUBSCRIPTION_NAME=$(echo $keyvault_secret_details | python -c "import sys, json; print(json.load(sys.stdin)['value'])")
        echo "COMMAND_RECEIVED_SUBSCRIPTION_NAME=$charges_COMMAND_RECEIVED_SUBSCRIPTION_NAME" >> $GITHUB_ENV

        keyvault_secret_details=$(az keyvault secret show --name "COMMAND-ACCEPTED-SUBSCRIPTION-NAME" --vault-name ${{ inputs.key_vault_name }})
        charges_COMMAND_ACCEPTED_SUBSCRIPTION_NAME=$(echo $keyvault_secret_details | python -c "import sys, json; print(json.load(sys.stdin)['value'])")
        echo "COMMAND_ACCEPTED_SUBSCRIPTION_NAME=$charges_COMMAND_ACCEPTED_SUBSCRIPTION_NAME" >> $GITHUB_ENV

        keyvault_secret_details=$(az keyvault secret show --name "COMMAND-REJECTED-SUBSCRIPTION-NAME" --vault-name ${{ inputs.key_vault_name }})
        charges_COMMAND_REJECTED_SUBSCRIPTION_NAME=$(echo $keyvault_secret_details | python -c "import sys, json; print(json.load(sys.stdin)['value'])")
        echo "COMMAND_REJECTED_SUBSCRIPTION_NAME=$charges_COMMAND_REJECTED_SUBSCRIPTION_NAME" >> $GITHUB_ENV

        keyvault_secret_details=$(az keyvault secret show --name "CHARGE-DB-CONNECTION-STRING" --vault-name ${{ inputs.key_vault_name }})
        charges_CHARGE_DB_CONNECTION_STRING=$(echo $keyvault_secret_details | python -c "import sys, json; print(json.load(sys.stdin)['value'])")
        echo ::add-mask::$charges_CHARGE_DB_CONNECTION_STRING
        echo "CHARGE_DB_CONNECTION_STRING=$charges_CHARGE_DB_CONNECTION_STRING" >> $GITHUB_ENV
      
    - name: Run integration tests
      shell: bash
      run: |
        dotnet test ${{ inputs.test_dll }}
