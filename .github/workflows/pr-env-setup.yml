# Copyright 2020 Energinet DataHub A/S
#
# Licensed under the Apache License, Version 2.0 (the "License2");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
name: PR Environment - Setup

on:
  pull_request:
    branches:
      - main
    paths:
      - build/infrastructure
      - .github/workflows/pr-env-setup.yml
  workflow_dispatch: {}
env:
  ORGANISATION_NAME: endk
  PROJECT_NAME: 'cha${{ github.event.number }}'
  RESOURCE_GROUP_NAME: rg-DataHub-Testing-U
  ENVIRONMENT_SHORT: u
  INTEGRATION_TEST_CSPROJ_FILE_PATH: 'source/GreenEnergyHub.Charges/source/GreenEnergyHub.Charges.IntegrationTests/GreenEnergyHub.Charges.IntegrationTests.csproj'
  INTEGRATION_TEST_DLL: GreenEnergyHub.Charges.IntegrationTests.dll
  DEFAULT_LOCATION: "westeurope"
  TENANT_ID: ${{ secrets.TENANT_ID }}
  CLIENT_SECRET: ${{ secrets.SPN_SECRET }}
  CLIENT_ID: ${{ secrets.SPN_ID }}
  CLIENT_OBJECT_ID: ${{ secrets.SPN_SECRET }}
  SUBSCRIPTION_ID: ${{ secrets.SUBSCRIPTION_ID }}

jobs:
  infra_deploy:
    name: Testing infrastructure
    runs-on: ubuntu-latest
    environment:
      name: rg-DataHub-Testing-U
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set Environment Secrets
        run: |  
          echo "ARM_TENANT_ID=${{ secrets.TENANT_ID }}" >> $GITHUB_ENV
          echo "ARM_CLIENT_ID=${{ secrets.SPN_ID }}" >> $GITHUB_ENV
          echo "ARM_CLIENT_OBJECT_ID=${{ secrets.SPN_OBJECT_ID }}" >> $GITHUB_ENV
          echo "ARM_CLIENT_SECRET=${{ secrets.SPN_SECRET }}" >> $GITHUB_ENV
          echo "ARM_SUBSCRIPTION_ID=${{ secrets.SUBSCRIPTION_ID }}" >> $GITHUB_ENV

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1.2.1
        with:
          terraform_wrapper: false
      
      - name: Setup Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.7' # Version range or exact version of a Python version to use, using SemVer's version range syntax
          architecture: 'x64' # optional x64 or x86. Defaults to x64 if not specified

      - name: Azure CLI Install and Login
        uses: ./.github/actions/azure-cli-install-login

      - name: Setup Authorization to pull TF modules
        run: |
          git config --local --remove-section http."https://github.com/"
          git config --global url."https://foo:${{ secrets.PAT_TOKEN }}@github.com/Energinet-DataHub/geh-terraform-modules".insteadOf "https://github.com/Energinet-DataHub/geh-terraform-modules"
      
      - name: Check If Terraform State Storage exists
        id: state-storage-exists
        run: |
          storage_exists=$(az storage account check-name --name 'tfstate${{ env.PROJECT_NAME }}${{ env.ENVIRONMENT_SHORT }}' | python3 -c "import sys, json; print(not json.load(sys.stdin)['nameAvailable'])")
          echo "::set-output name=state-storage-exists::${storage_exists}"

      # Create TF State Container if needed
      - name: Create Terraform State Storage
        run: |
          storage_name="tfstate${{ env.PROJECT_NAME }}${{ env.ENVIRONMENT_SHORT }}"
          az storage account create --resource-group ${{ env.RESOURCE_GROUP_NAME }} --name $storage_name --sku Standard_LRS --encryption-services blob
          account_key=$(az storage account keys list --resource-group ${{ env.RESOURCE_GROUP_NAME }} --account-name $storage_name --query '[0].value' -o tsv)
          az storage container create --name tfstate --account-name $storage_name --account-key $account_key
        if: steps.state-storage-exists.outputs.state-storage-exists == 'False'

      # Try not to reference TF_VAR variables in pipeline yml files, only values should be set and they should be read in terraform only
      # rather create duplicate ENV pipeline vatiable if needed to separate concerns
      - name: Set TF Vars
        run: |
          echo "TF_VAR_environment=${{ env.ENVIRONMENT_SHORT }}" >> $GITHUB_ENV
          echo "TF_VAR_organisation=${{ env.ORGANISATION_NAME }}" >> $GITHUB_ENV
          echo "TF_VAR_project=${{ env.PROJECT_NAME }}" >> $GITHUB_ENV
          echo "TF_VAR_resource_group_name=${{ env.RESOURCE_GROUP_NAME }}" >> $GITHUB_ENV
          echo "TF_VAR_tenant_id=${{ secrets.TENANT_ID }}" >> $GITHUB_ENV
          echo "TF_VAR_spn_object_id=${{ secrets.SPN_OBJECT_ID }}" >> $GITHUB_ENV

      - name: Configure Terraform Backend
        uses: ./.github/actions/configure-terraform-backend
        with:
          backend-file-path: "./build/infrastructure/backend.tf"
          resource-group-name: "${{ env.RESOURCE_GROUP_NAME }}"
          storage-account-name: "tfstate${{ env.PROJECT_NAME }}${{ env.ENVIRONMENT_SHORT }}"

      - name: Terraform Init
        working-directory: ./build/infrastructure
        run: terraform init

      - name: Terraform Plan
        working-directory: ./build/infrastructure
        run: terraform plan

      - name: Terraform Apply
        working-directory: ./build/infrastructure
        run: terraform apply -no-color -auto-approve
        continue-on-error: false

      - name: comment PR
        uses: unsplash/comment-on-pr@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          msg: "Congratulations! Your enviroment was successfully deployed into rg-DataHub-Testing-U (Resources will contain the name ${{ env.PROJECT_NAME }}). It will automatically be destroyed again when the PR is closed."
          check_for_duplicate_msg: true  # OPTIONAL

      #########################################################################################################
      # Integration test
      #########################################################################################################

      # Get action required for integration test from repo
      - name: Checkout repository
        uses: actions/checkout@master

      - name: Build project
        run: |
          dotnet build ${{ env.INTEGRATION_TEST_CSPROJ_FILE_PATH }} --configuration Release --output ${{ github.workspace }}/output-integration-test

      - name: Run integration tests
        run: |
          dotnet test ${{ github.workspace }}/output-integration-test/${{ env.INTEGRATION_TEST_DLL }} --filter HostingEnvironment=PullRequestGate --logger:"console;verbosity=detailed"
