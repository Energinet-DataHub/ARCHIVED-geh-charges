// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;

#nullable disable

namespace GreenEnergyHub.Charges.QueryApi.ScaffoldedModels
{
    public partial class ChargesdatabaseContext : DbContext
    {
        public ChargesdatabaseContext()
        {
        }

        public ChargesdatabaseContext(DbContextOptions<ChargesdatabaseContext> options)
            : base(options)
        {
        }

        public virtual DbSet<Charge> Charge { get; set; }
        public virtual DbSet<ChargeLink> ChargeLink { get; set; }
        public virtual DbSet<ChargeLinkOperation> ChargeLinkOperation { get; set; }
        public virtual DbSet<ChargeLinkPeriodDetails> ChargeLinkPeriodDetails { get; set; }
        public virtual DbSet<ChargeOperation> ChargeOperation { get; set; }
        public virtual DbSet<ChargePeriodDetails> ChargePeriodDetails { get; set; }
        public virtual DbSet<ChargePrice> ChargePrice { get; set; }
        public virtual DbSet<DefaultChargeLink> DefaultChargeLink { get; set; }
        public virtual DbSet<MarketParticipant> MarketParticipant { get; set; }
        public virtual DbSet<MeteringPoint> MeteringPoint { get; set; }

        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        {
//            if (!optionsBuilder.IsConfigured)
//            {
//#warning To protect potentially sensitive information in your connection string, you should move it out of source code. You can avoid scaffolding the connection string by using the Name= syntax to read it from configuration - see https://go.microsoft.com/fwlink/?linkid=2131148. For more guidance on storing connection strings, see http://go.microsoft.com/fwlink/?LinkId=723263.
//                optionsBuilder.UseSqlServer("Data Source=(localdb)\\mssqllocaldb;Initial Catalog=ChargesDatabase;Integrated Security=True");
//            }
        }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.HasAnnotation("Relational:Collation", "SQL_Latin1_General_CP1_CI_AS");

            modelBuilder.Entity<Charge>(entity =>
            {
                entity.HasKey(e => e.Id)
                    .IsClustered(false);

                entity.ToTable("Charge", "Charges");

                entity.HasIndex(e => new { e.SenderProvidedChargeId, e.ChargeType, e.MarketParticipantId }, "IX_SenderProvidedChargeId_ChargeType_MarketParticipantId");

                entity.Property(e => e.Id).ValueGeneratedNever();

                entity.Property(e => e.Currency)
                    .IsRequired()
                    .HasMaxLength(10);

                entity.Property(e => e.SenderProvidedChargeId)
                    .IsRequired()
                    .HasMaxLength(35);

                entity.HasOne(d => d.MarketParticipant)
                    .WithMany(p => p.Charge)
                    .HasForeignKey(d => d.MarketParticipantId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__Charge__MarketPa__534D60F1");
            });

            modelBuilder.Entity<ChargeLink>(entity =>
            {
                entity.HasKey(e => e.Id)
                    .IsClustered(false);

                entity.ToTable("ChargeLink", "Charges");

                entity.HasIndex(e => new { e.MeteringPointId, e.ChargeId }, "IX_MeteringPointId_ChargeId");

                entity.Property(e => e.Id).ValueGeneratedNever();

                entity.HasOne(d => d.Charge)
                    .WithMany(p => p.ChargeLink)
                    .HasForeignKey(d => d.ChargeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__ChargeLin__Charg__656C112C");

                entity.HasOne(d => d.MeteringPoint)
                    .WithMany(p => p.ChargeLink)
                    .HasForeignKey(d => d.MeteringPointId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__ChargeLin__Meter__66603565");
            });

            modelBuilder.Entity<ChargeLinkOperation>(entity =>
            {
                entity.HasKey(e => e.Id)
                    .IsClustered(false);

                entity.ToTable("ChargeLinkOperation", "Charges");

                entity.HasIndex(e => new { e.ChargeLinkId, e.WriteDateTime }, "IX_ChargeLinkId_WriteDateTime");

                entity.Property(e => e.Id).ValueGeneratedNever();

                entity.Property(e => e.CorrelationId)
                    .IsRequired()
                    .HasMaxLength(36);

                entity.Property(e => e.SenderProvidedId)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.WriteDateTime).HasDefaultValueSql("(getdate())");

                entity.HasOne(d => d.ChargeLink)
                    .WithMany(p => p.ChargeLinkOperation)
                    .HasForeignKey(d => d.ChargeLinkId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__ChargeLin__Charg__693CA210");
            });

            modelBuilder.Entity<ChargeLinkPeriodDetails>(entity =>
            {
                entity.HasKey(e => e.Id)
                    .IsClustered(false);

                entity.ToTable("ChargeLinkPeriodDetails", "Charges");

                entity.HasIndex(e => new { e.ChargeLinkId, e.StartDateTime, e.EndDateTime }, "IX_ChargeLinkId_StartDateTime_EndDateTime");

                entity.HasIndex(e => e.CreatedByOperationId, "IX_CreatedByOperationId");

                entity.HasIndex(e => e.RetiredByOperationId, "IX_RetiredByOperationId");

                entity.Property(e => e.Id).ValueGeneratedNever();

                entity.HasOne(d => d.ChargeLink)
                    .WithMany(p => p.ChargeLinkPeriodDetails)
                    .HasForeignKey(d => d.ChargeLinkId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__ChargeLin__Charg__6D0D32F4");

                entity.HasOne(d => d.CreatedByOperation)
                    .WithMany(p => p.ChargeLinkPeriodDetailsCreatedByOperation)
                    .HasForeignKey(d => d.CreatedByOperationId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__ChargeLin__Creat__6E01572D");

                entity.HasOne(d => d.RetiredByOperation)
                    .WithMany(p => p.ChargeLinkPeriodDetailsRetiredByOperation)
                    .HasForeignKey(d => d.RetiredByOperationId)
                    .HasConstraintName("FK__ChargeLin__Retir__6EF57B66");
            });

            modelBuilder.Entity<ChargeOperation>(entity =>
            {
                entity.HasKey(e => e.Id)
                    .IsClustered(false);

                entity.ToTable("ChargeOperation", "Charges");

                entity.HasIndex(e => new { e.ChargeId, e.WriteDateTime }, "IX_ChargeId_WriteDateTime");

                entity.Property(e => e.Id).ValueGeneratedNever();

                entity.Property(e => e.ChargeOperationId)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.CorrelationId)
                    .IsRequired()
                    .HasMaxLength(36);

                entity.HasOne(d => d.Charge)
                    .WithMany(p => p.ChargeOperation)
                    .HasForeignKey(d => d.ChargeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__ChargeOpe__Charg__5629CD9C");
            });

            modelBuilder.Entity<ChargePeriodDetails>(entity =>
            {
                entity.HasKey(e => e.Id)
                    .IsClustered(false);

                entity.ToTable("ChargePeriodDetails", "Charges");

                entity.HasIndex(e => new { e.ChargeId, e.StartDateTime, e.EndDateTime, e.Retired }, "IX_ChargeId_StartDateTime_EndDateTime_Retired");

                entity.HasIndex(e => e.ChargeOperationId, "IX_ChargeOperationId");

                entity.Property(e => e.Id).ValueGeneratedNever();

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(2048);

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(132);

                entity.HasOne(d => d.Charge)
                    .WithMany(p => p.ChargePeriodDetails)
                    .HasForeignKey(d => d.ChargeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__ChargePer__Charg__59063A47");

                entity.HasOne(d => d.ChargeOperation)
                    .WithMany(p => p.ChargePeriodDetails)
                    .HasForeignKey(d => d.ChargeOperationId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__ChargePer__Charg__59FA5E80");
            });

            modelBuilder.Entity<ChargePrice>(entity =>
            {
                entity.HasKey(e => e.Id)
                    .IsClustered(false);

                entity.ToTable("ChargePrice", "Charges");

                entity.HasIndex(e => new { e.ChargeId, e.Time, e.ChargeOperationId }, "IX_ChargeId_Time_ChargeOperationId");

                entity.Property(e => e.Id).ValueGeneratedNever();

                entity.Property(e => e.Price).HasColumnType("decimal(14, 6)");

                entity.HasOne(d => d.Charge)
                    .WithMany(p => p.ChargePrice)
                    .HasForeignKey(d => d.ChargeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__ChargePri__Charg__5CD6CB2B");

                entity.HasOne(d => d.ChargeOperation)
                    .WithMany(p => p.ChargePrice)
                    .HasForeignKey(d => d.ChargeOperationId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__ChargePri__Charg__5DCAEF64");
            });

            modelBuilder.Entity<DefaultChargeLink>(entity =>
            {
                entity.HasKey(e => e.Id)
                    .IsClustered(false);

                entity.ToTable("DefaultChargeLink", "Charges");

                entity.HasIndex(e => new { e.MeteringPointType, e.StartDateTime, e.EndDateTime }, "IX_MeteringPointType_StartDateTime_EndDateTime");

                entity.Property(e => e.Id).ValueGeneratedNever();

                entity.HasOne(d => d.Charge)
                    .WithMany(p => p.DefaultChargeLink)
                    .HasForeignKey(d => d.ChargeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__DefaultCh__Charg__60A75C0F");
            });

            modelBuilder.Entity<MarketParticipant>(entity =>
            {
                entity.HasKey(e => e.Id)
                    .IsClustered(false);

                entity.ToTable("MarketParticipant", "Charges");

                entity.Property(e => e.Id).ValueGeneratedNever();

                entity.Property(e => e.MarketParticipantId)
                    .IsRequired()
                    .HasMaxLength(35);

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(100);
            });

            modelBuilder.Entity<MeteringPoint>(entity =>
            {
                entity.HasKey(e => e.Id)
                    .IsClustered(false);

                entity.ToTable("MeteringPoint", "Charges");

                entity.HasIndex(e => e.MeteringPointId, "IX_MeteringPointId");

                entity.HasIndex(e => e.MeteringPointId, "UC_MeteringPointId")
                    .IsUnique();

                entity.Property(e => e.Id).ValueGeneratedNever();

                entity.Property(e => e.GridAreaId)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.MeteringPointId)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}
