/* Copyright 2020 Energinet DataHub A/S
 *
 * Licensed under the Apache License, Version 2.0 (the "License2");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Charge link Domain related messages.
 */
syntax = "proto3";

import "google/protobuf/timestamp.proto";

option csharp_namespace = "GreenEnergyHub.Charges.Infrastructure.Internal.ChargeCommandAccepted";

message ChargeCommandAcceptedContract {
  DocumentContract document = 1;
  ChargeOperationContract charge_operation = 2;
  string correlation_id = 3; // Unique identifier used inside GEH to identify a message across domains and inside domains
}

message DocumentContract {
  string id = 1; // An identifier for the charge link event. Provided by the Market Participant. Uniqueness cannot be guaranteed
  google.protobuf.Timestamp request_date = 2; // The datetime of when the request was received by GEH
  DocumentTypeContract type = 3; // The document type indicates the intended business context of this business message.
  google.protobuf.Timestamp created_date_time = 4; // A datetime created by external actors and mostly used for support
  MarketParticipantContract sender = 5; // A market participant, e.g. a Grid Access Provider, whom may submit a charge link message.
  MarketParticipantContract recipient = 6; // A market participant, e.g. Metering Point Administrator, whom may receive a charge link message.
  IndustryClassificationContract industry_classification = 7; // IndustryClassification indicates the industry context. E.g. if a Charge price list is related to electricity.
  BusinessReasonCodeContract business_reason_code = 8; // BusinessReasonCode indicates the intended business context.
}

message MarketParticipantContract {
  string id = 1; // Contains an ID that identifies the Market Participants. In Denmark this would be the GLN number or EIC code.
  MarketParticipantRoleContract BusinessProcessRole = 2;  // Contains the role a market participant uses when initiating and communicating with Green Energy Hub
}

message ChargeOperationContract {
  string id = 1; // Contains a ID for the specific link, provided by the sender. Combined with sender.id it becomes unique.
  OperationTypeContract operation_type = 2; // This enum indicates the action requested by the sender
  string charge_id = 3; // A charge identifier. Combined with Charge Owner and Charge Type it becomes unique
  ChargeTypeContract charge_type = 4; // The type of charge; tariff, fee or subscription
  string charge_name = 5; // The charge name, Example: "Elafgift"
  string charge_description = 6; //
  google.protobuf.Timestamp start_date_time = 7; // In UTC. The charge link period's valid from date and time
  google.protobuf.Timestamp end_date_time = 8; // In UTC. The charge link period's valid to date and time. The default value will be the equivalent to 9999-12-31T23:59:59Z without milliseconds
  VatClassificationContract vat_classification = 9;
  bool transparent_invoicing = 10; // In Denmark the Energy Supplier invoices the customer, including the charges from the Grid Access Provider and the System Operator. This boolean can be use to indicate that a charge must be visible on the invoice sent to the customer.
  bool tax_indicator = 11; // Indicates whether the Charge is tax or not.
  string charge_owner = 12; // A charge owner identification, e.g. the Market Participant's GLN or EIC number
  ResolutionContract resolution = 13;
  repeated PointContract points = 14;
}

message PointContract
{
    int32 position = 1; // The position of the price in the price list it was delivered.
    double price = 2;
    google.protobuf.Timestamp time = 3; // A point in time, where the price applies.
}

enum ResolutionContract
{
    R_UNKNOWN = 0;
    R_PT15m = 1;
    R_PT1H = 2;
    R_P1D = 3;
    R_P1M = 4;
}

enum VatClassificationContract
{
    VT_UNKNOWN = 0;
    VT_NO_VAT = 1;
    VT_VAT_25 = 2;
}

enum OperationTypeContract
{
    OT_UNKNOWN = 0;
    OT_CREATE = 1;
    OT_STOP = 2;
    OT_UPDATE = 3;
}

enum DocumentTypeContract
{
  DT_UNKNOWN = 0;
  DT_REQUEST_CHANGE_BILLING_MASTER_DATA = 1;
  DT_REQUEST_UPDATE_CHARGE_INFORMATION = 2;
}

enum MarketParticipantRoleContract
{
  MPR_UNKNOWN = 0;
  MPR_ENERGY_SUPPLIER = 1;
  MPR_GRID_ACCESS_PROVIDER = 2;
  MPR_SYSTEM_OPERATOR = 3;
  MPR_METERED_DATA_RESPONSIBLE = 4;
  MPR_ENERGY_AGENCY = 5;
  MPR_METERED_DATA_ADMINISTRATOR = 6;
  MPR_METERING_POINT_ADMINISTRATOR = 7;
}

enum IndustryClassificationContract {
  IC_UNKNOWN = 0;
  IC_ELECTRICITY = 1;
}

enum BusinessReasonCodeContract {
  BRC_UNKNOWN = 0;
  BRC_UPDATE_MASTER_DATA_SETTLEMENT = 1;
  BRC_UPDATE_CHARGE_INFORMATION = 2;
}

enum ChargeTypeContract {
  CT_UNKNOWN = 0;
  CT_SUBSCRIPTION = 1;
  CT_FEE = 2;
  CT_TARIFF = 3;
}