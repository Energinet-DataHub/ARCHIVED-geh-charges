/* Copyright 2020 Energinet DataHub A/S
 *
 * Licensed under the Apache License, Version 2.0 (the "License2");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/*
 * Charge link Domain related messages.
 */
syntax = "proto3";

import "google/protobuf/timestamp.proto";

option csharp_namespace = "GreenEnergyHub.Charges.Infrastructure.Integration.ChargeConfirmation";

message ChargePricesUpdated {
  string charge_id = 1; // A charge identifier provided by the Market Participant. Combined with Charge Owner and Charge Type it becomes unique
  enum ChargeType {
      CT_UNKNOWN = 0;
      CT_SUBSCRIPTION = 1;
      CT_FEE = 2;
      CT_TARIFF = 3;
  }
  ChargeType charge_type = 2; // The type of charge; tariff, fee or subscription
  string charge_owner = 3; // A charge owner identification, e.g. the Market Participant's GLN or EIC number
  google.protobuf.Timestamp update_period_start_date = 4; // In UTC. The start of the charge prices period. The start equals the time of the earliest charge price in the list
  google.protobuf.Timestamp update_period_end_date = 5; // In UTC. The end of the charge prices period. The end is to be considered an up to (excluding) date time which equals the end of the latest charge price in the list. This is a calculated value that adds a single duration equal to the charge's resolution, e.g. hourly, to the latest charge price's time
  repeated ChargePrice points = 6; // A list with charge prices
}

message ChargePrice
{
  DecimalValue price = 1; // Charge price
  google.protobuf.Timestamp time = 2; // In UTC. Point in time where the charge price applies
}

/* ProtoBuf doesn't support decimal.
 * This implementation is inspired by https://docs.microsoft.com/en-us/aspnet/core/grpc/protobuf?view=aspnetcore-5.0#decimals.
 * The type is a candidate for separating out into a reusable package. This is however not (yet) done
 * due to challenges with multi-file contracts in PySpark.
 *
 * Example: 12345.6789 -> { units = 12345, nanos = 678900000 }
*/
message DecimalValue {
  // Whole units part of the amount
  int64 units = 1;
  // Nano units of the amount (10^-9)
  // Must be same sign as units
  sfixed32 nanos = 2;
}